// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/Lexer.flex


package main.jflex;

import main.java.ClaseLexica;
import main.java.Token;


@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\0\3\30\1\31\1\30\1\32"+
    "\24\30\1\33\1\34\1\35\3\0\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\30\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\30\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\2\30\1\64\1\65"+
    "\1\66\7\0\1\3\73\0\1\30\7\0\1\30\3\0"+
    "\1\30\3\0\1\30\1\0\1\30\2\0\1\30\3\0"+
    "\1\30\1\0\1\30\4\0\1\30\7\0\1\30\3\0"+
    "\1\30\3\0\1\30\1\0\1\30\2\0\1\30\3\0"+
    "\1\30\1\0\1\30\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\3\2\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\14\22"+
    "\1\25\1\0\1\26\1\27\1\30\1\0\1\31\3\0"+
    "\1\32\1\0\1\33\1\34\1\35\4\22\1\36\4\22"+
    "\1\37\13\22\1\40\1\41\1\0\1\42\1\43\11\22"+
    "\1\44\2\22\1\45\10\22\1\0\1\46\2\43\1\47"+
    "\1\22\1\50\3\22\1\51\2\22\1\52\4\22\1\53"+
    "\1\54\3\22\1\55\1\56\1\22\1\43\1\57\3\22"+
    "\1\60\1\61\1\62\1\22\1\63\4\22\1\64\1\43"+
    "\2\22\1\65\1\22\1\66\1\67\1\70\1\71\1\43"+
    "\1\72\1\73\1\22\1\43\1\74\12\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\334"+
    "\0\334\0\334\0\334\0\334\0\334\0\334\0\u0181\0\u01b8"+
    "\0\334\0\334\0\u01ef\0\u0226\0\u025d\0\u0294\0\334\0\334"+
    "\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c"+
    "\0\u0483\0\u04ba\0\u04f1\0\u0528\0\334\0\u055f\0\334\0\334"+
    "\0\334\0\u0596\0\334\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\334\0\334\0\334\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc"+
    "\0\u07f3\0\u082a\0\u0861\0\u0898\0\u0294\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\334\0\334\0\u0b2c\0\u0672\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0294\0\u0d89"+
    "\0\u0dc0\0\u0294\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0faf\0\334\0\u0fe6\0\334\0\334\0\u101d"+
    "\0\u0294\0\u1054\0\u108b\0\u10c2\0\u0294\0\u10f9\0\u1130\0\u0294"+
    "\0\u1167\0\u119e\0\u11d5\0\u120c\0\u0294\0\u0294\0\u1243\0\u127a"+
    "\0\u12b1\0\u0294\0\u0294\0\u12e8\0\u131f\0\u0294\0\u1356\0\u138d"+
    "\0\u13c4\0\u0294\0\u0294\0\u0294\0\u13fb\0\u0294\0\u1432\0\u1469"+
    "\0\u14a0\0\u14d7\0\u0294\0\u150e\0\u1545\0\u157c\0\u0294\0\u15b3"+
    "\0\u0294\0\u0294\0\u0294\0\u0294\0\u15ea\0\u0294\0\u0294\0\u1621"+
    "\0\u1658\0\u0294\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u1847\0\u187e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\3\26"+
    "\1\27\1\0\1\30\1\26\1\31\1\32\1\33\1\34"+
    "\1\35\2\26\1\36\5\26\1\37\1\40\1\41\1\42"+
    "\1\26\1\43\1\44\1\26\1\45\1\46\1\47\1\0"+
    "\2\2\1\0\1\2\110\0\1\50\40\0\6\4\1\51"+
    "\25\4\1\52\32\4\77\0\1\53\56\0\11\54\1\0"+
    "\22\54\1\55\32\54\14\0\1\56\4\0\1\57\65\0"+
    "\1\60\1\0\1\20\72\0\1\61\66\0\1\62\66\0"+
    "\1\63\70\0\3\26\3\0\26\26\33\0\3\26\3\0"+
    "\17\26\1\64\6\26\33\0\3\26\3\0\1\65\14\26"+
    "\1\66\10\26\33\0\3\26\3\0\4\26\1\67\10\26"+
    "\1\70\10\26\33\0\3\26\3\0\12\26\1\71\13\26"+
    "\33\0\3\26\3\0\1\72\11\26\1\73\7\26\1\74"+
    "\3\26\33\0\3\26\3\0\5\26\1\75\6\26\1\76"+
    "\11\26\33\0\3\26\3\0\17\26\1\77\1\26\1\100"+
    "\4\26\33\0\3\26\3\0\4\26\1\101\15\26\1\102"+
    "\3\26\33\0\3\26\3\0\2\26\1\103\16\26\1\104"+
    "\2\26\1\105\1\26\33\0\3\26\3\0\17\26\1\106"+
    "\6\26\33\0\3\26\3\0\15\26\1\107\10\26\33\0"+
    "\3\26\3\0\7\26\1\110\16\26\70\0\1\111\1\0"+
    "\2\4\3\0\62\4\11\0\1\112\55\0\2\54\3\0"+
    "\62\54\14\56\1\113\52\56\2\114\1\0\64\114\22\0"+
    "\1\115\74\0\3\26\3\0\4\26\1\116\21\26\33\0"+
    "\3\26\3\0\20\26\1\117\5\26\33\0\3\26\3\0"+
    "\13\26\1\120\12\26\33\0\3\26\3\0\5\26\1\121"+
    "\20\26\33\0\3\26\3\0\22\26\1\122\3\26\33\0"+
    "\3\26\3\0\20\26\1\123\5\26\33\0\3\26\3\0"+
    "\12\26\1\124\13\26\33\0\3\26\3\0\15\26\1\125"+
    "\10\26\33\0\3\26\3\0\14\26\1\126\11\26\33\0"+
    "\3\26\3\0\21\26\1\127\4\26\33\0\3\26\3\0"+
    "\10\26\1\130\4\26\1\131\10\26\33\0\3\26\3\0"+
    "\17\26\1\132\6\26\33\0\3\26\3\0\21\26\1\133"+
    "\4\26\33\0\3\26\3\0\14\26\1\134\11\26\33\0"+
    "\3\26\3\0\1\135\25\26\33\0\3\26\3\0\17\26"+
    "\1\136\6\26\33\0\3\26\3\0\10\26\1\137\15\26"+
    "\33\0\3\26\3\0\22\26\1\140\3\26\33\0\3\26"+
    "\3\0\10\26\1\141\15\26\33\0\3\26\3\0\10\26"+
    "\1\142\15\26\3\0\14\143\1\113\4\143\1\144\45\143"+
    "\22\0\1\145\6\0\1\146\1\147\6\0\1\146\1\0"+
    "\1\147\53\0\3\26\3\0\1\150\25\26\33\0\3\26"+
    "\3\0\4\26\1\151\21\26\33\0\3\26\3\0\16\26"+
    "\1\152\7\26\33\0\3\26\3\0\1\153\25\26\33\0"+
    "\3\26\3\0\1\26\1\154\24\26\33\0\3\26\3\0"+
    "\4\26\1\155\21\26\33\0\3\26\3\0\20\26\1\156"+
    "\5\26\33\0\3\26\3\0\1\157\25\26\33\0\3\26"+
    "\3\0\2\26\1\160\23\26\33\0\3\26\3\0\14\26"+
    "\1\161\11\26\33\0\3\26\3\0\6\26\1\162\12\26"+
    "\1\163\4\26\33\0\3\26\3\0\22\26\1\164\3\26"+
    "\33\0\3\26\3\0\4\26\1\165\21\26\33\0\3\26"+
    "\3\0\14\26\1\166\11\26\33\0\3\26\3\0\10\26"+
    "\1\167\11\26\1\170\3\26\33\0\3\26\3\0\21\26"+
    "\1\171\4\26\33\0\3\26\3\0\4\26\1\172\21\26"+
    "\33\0\3\26\3\0\3\26\1\173\22\26\33\0\3\26"+
    "\3\0\12\26\1\174\13\26\3\0\14\143\1\113\4\143"+
    "\1\0\45\143\22\0\1\175\6\0\1\146\1\147\6\0"+
    "\1\146\1\0\1\147\53\0\3\26\3\0\11\26\1\176"+
    "\14\26\33\0\3\26\3\0\12\26\1\177\13\26\33\0"+
    "\3\26\3\0\22\26\1\200\3\26\33\0\3\26\3\0"+
    "\12\26\1\201\13\26\33\0\3\26\3\0\4\26\1\202"+
    "\21\26\33\0\3\26\3\0\21\26\1\203\4\26\33\0"+
    "\3\26\3\0\21\26\1\204\4\26\33\0\3\26\3\0"+
    "\17\26\1\205\6\26\33\0\3\26\3\0\15\26\1\206"+
    "\10\26\33\0\3\26\3\0\17\26\1\207\6\26\33\0"+
    "\3\26\3\0\14\26\1\210\11\26\33\0\3\26\3\0"+
    "\2\26\1\211\23\26\33\0\3\26\3\0\2\26\1\212"+
    "\23\26\33\0\3\26\3\0\4\26\1\213\21\26\25\0"+
    "\1\214\6\0\1\146\1\147\6\0\1\146\1\0\1\147"+
    "\53\0\3\26\3\0\4\26\1\215\21\26\33\0\3\26"+
    "\3\0\12\26\1\216\13\26\33\0\3\26\3\0\4\26"+
    "\1\217\21\26\33\0\3\26\3\0\1\220\25\26\33\0"+
    "\3\26\3\0\14\26\1\221\11\26\33\0\3\26\3\0"+
    "\6\26\1\222\17\26\33\0\3\26\3\0\21\26\1\223"+
    "\4\26\33\0\3\26\3\0\7\26\1\224\16\26\25\0"+
    "\1\225\6\0\1\146\1\147\6\0\1\146\1\0\1\147"+
    "\53\0\3\26\3\0\25\26\1\226\33\0\3\26\3\0"+
    "\21\26\1\227\4\26\33\0\3\26\3\0\13\26\1\230"+
    "\12\26\25\0\1\231\6\0\1\146\1\147\6\0\1\146"+
    "\1\0\1\147\53\0\3\26\3\0\1\232\25\26\25\0"+
    "\1\233\6\0\1\146\1\147\6\0\1\146\1\0\1\147"+
    "\45\0\1\234\6\0\1\146\1\147\6\0\1\146\1\0"+
    "\1\147\45\0\1\235\6\0\1\146\7\0\1\146\47\0"+
    "\1\236\6\0\1\146\7\0\1\146\47\0\1\237\6\0"+
    "\1\146\7\0\1\146\47\0\1\240\6\0\1\146\7\0"+
    "\1\146\47\0\1\241\6\0\1\146\7\0\1\146\47\0"+
    "\1\242\6\0\1\146\7\0\1\146\47\0\1\243\6\0"+
    "\1\146\7\0\1\146\47\0\1\244\6\0\1\146\7\0"+
    "\1\146\56\0\1\146\7\0\1\146\25\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6325];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\1\11\2\0\7\11\2\1\2\11"+
    "\4\1\2\11\14\1\1\11\1\0\3\11\1\0\1\11"+
    "\3\0\1\1\1\0\3\11\25\1\2\11\1\0\27\1"+
    "\1\0\1\11\1\1\2\11\75\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

public Token actual;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return new Token(ClaseLexica.EOF, yytext());
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignorar */
            }
          // fall through
          case 61: break;
          case 2:
            { System.out.println("Token encontrado: NOT (" + yytext() + ")"); return new Token(ClaseLexica.NOT, yytext());
            }
          // fall through
          case 62: break;
          case 3:
            { System.out.println("Token encontrado: MODULO (" + yytext() + ")"); return new Token(ClaseLexica.MODULO, yytext());
            }
          // fall through
          case 63: break;
          case 4:
            { System.out.println("Token encontrado: PARENTESIS_ABRE (" + yytext() + ")"); return new Token(ClaseLexica.PARENTESIS_ABRE, yytext());
            }
          // fall through
          case 64: break;
          case 5:
            { System.out.println("Token encontrado: PARENTESIS_CIERRA (" + yytext() + ")"); return new Token(ClaseLexica.PARENTESIS_CIERRA, yytext());
            }
          // fall through
          case 65: break;
          case 6:
            { System.out.println("Token encontrado: MULTIPLICACION (" + yytext() + ")"); return new Token(ClaseLexica.MULTIPLICACION, yytext());
            }
          // fall through
          case 66: break;
          case 7:
            { System.out.println("Token encontrado: MAS (" + yytext() + ")"); return new Token(ClaseLexica.MAS, yytext());
            }
          // fall through
          case 67: break;
          case 8:
            { System.out.println("Token encontrado: COMA (" + yytext() + ")"); return new Token(ClaseLexica.COMA, yytext());
            }
          // fall through
          case 68: break;
          case 9:
            { System.out.println("Token encontrado: MENOS (" + yytext() + ")"); return new Token(ClaseLexica.MENOS, yytext());
            }
          // fall through
          case 69: break;
          case 10:
            { System.out.println("Token encontrado: PUNTO (" + yytext() + ")"); return new Token(ClaseLexica.PUNTO, yytext());
            }
          // fall through
          case 70: break;
          case 11:
            { System.out.println("Token encontrado: DIVISION (" + yytext() + ")"); return new Token(ClaseLexica.DIVISION, yytext());
            }
          // fall through
          case 71: break;
          case 12:
            { System.out.println("Token encontrado: LITERAL_ENTERA (" + yytext() + ")"); return new Token(ClaseLexica.LITERAL_ENTERA, yytext());
            }
          // fall through
          case 72: break;
          case 13:
            { System.out.println("Token encontrado: DOS_PUNTOS (" + yytext() + ")"); return new Token(ClaseLexica.DOS_PUNTOS, yytext());
            }
          // fall through
          case 73: break;
          case 14:
            { System.out.println("Token encontrado: PUNTO_Y_COMA (" + yytext() + ")"); return new Token(ClaseLexica.PUNTO_Y_COMA, yytext());
            }
          // fall through
          case 74: break;
          case 15:
            { System.out.println("Token encontrado: MENOR (" + yytext() + ")"); return new Token(ClaseLexica.MENOR, yytext());
            }
          // fall through
          case 75: break;
          case 16:
            { System.out.println("Token encontrado: ASIGNACION (" + yytext() + ")"); return new Token(ClaseLexica.ASIGNACION, yytext());
            }
          // fall through
          case 76: break;
          case 17:
            { System.out.println("Token encontrado: MAYOR (" + yytext() + ")"); return new Token(ClaseLexica.MAYOR, yytext());
            }
          // fall through
          case 77: break;
          case 18:
            { System.out.println("Token encontrado: ID (" + yytext() + ")"); return new Token(ClaseLexica.ID, yytext());
            }
          // fall through
          case 78: break;
          case 19:
            { System.out.println("Token encontrado: CORCHETE_ABRE (" + yytext() + ")"); return new Token(ClaseLexica.CORCHETE_ABRE, yytext());
            }
          // fall through
          case 79: break;
          case 20:
            { System.out.println("Token encontrado: CORCHETE_CIERRA (" + yytext() + ")"); return new Token(ClaseLexica.CORCHETE_CIERRA, yytext());
            }
          // fall through
          case 80: break;
          case 21:
            { System.out.println("Token encontrado: LLAVE_ABRE (" + yytext() + ")"); return new Token(ClaseLexica.LLAVE_ABRE, yytext());
            }
          // fall through
          case 81: break;
          case 22:
            { System.out.println("Token encontrado: LLAVE_CIERRA (" + yytext() + ")"); return new Token(ClaseLexica.LLAVE_CIERRA, yytext());
            }
          // fall through
          case 82: break;
          case 23:
            { System.out.println("Token encontrado: DIFERENTE (" + yytext() + ")"); return new Token(ClaseLexica.DIFERENTE, yytext());
            }
          // fall through
          case 83: break;
          case 24:
            { System.out.println("Token encontrado: LITERAL_CADENA (" + yytext() + ")"); return new Token(ClaseLexica.LITERAL_CADENA, yytext());
            }
          // fall through
          case 84: break;
          case 25:
            { System.out.println("Token encontrado: AND (" + yytext() + ")"); return new Token(ClaseLexica.AND, yytext());
            }
          // fall through
          case 85: break;
          case 26:
            { System.out.println("Token encontrado: DIVISION_ENTERA (" + yytext() + ")"); return new Token(ClaseLexica.DIVISION_ENTERA, yytext());
            }
          // fall through
          case 86: break;
          case 27:
            { System.out.println("Token encontrado: MENOR_IGUAL (" + yytext() + ")"); return new Token(ClaseLexica.MENOR_IGUAL, yytext());
            }
          // fall through
          case 87: break;
          case 28:
            { System.out.println("Token encontrado: IGUAL (" + yytext() + ")"); return new Token(ClaseLexica.IGUAL, yytext());
            }
          // fall through
          case 88: break;
          case 29:
            { System.out.println("Token encontrado: MAYOR_IGUAL (" + yytext() + ")"); return new Token(ClaseLexica.MAYOR_IGUAL, yytext());
            }
          // fall through
          case 89: break;
          case 30:
            { System.out.println("Token encontrado: DO (" + yytext() + ")"); return new Token(ClaseLexica.DO, yytext());
            }
          // fall through
          case 90: break;
          case 31:
            { System.out.println("Token encontrado: IF (" + yytext() + ")"); return new Token(ClaseLexica.IF, yytext());
            }
          // fall through
          case 91: break;
          case 32:
            { System.out.println("Token encontrado: OR (" + yytext() + ")"); return new Token(ClaseLexica.OR, yytext());
            }
          // fall through
          case 92: break;
          case 33:
            { System.out.println("Token encontrado: LITERAL_RUNA (" +yytext() + ")"); return new Token(ClaseLexica.LITERAL_RUNA, yytext());
            }
          // fall through
          case 93: break;
          case 34:
            { /* ignorar comentarios de una línea */
            }
          // fall through
          case 94: break;
          case 35:
            { System.out.println("Token encontrado: LITERAL_DOUBLE (" + yytext() + ")"); return new Token(ClaseLexica.LITERAL_DOUBLE, yytext());
            }
          // fall through
          case 95: break;
          case 36:
            { System.out.println("Token encontrado: INT (" + yytext() + ")"); return new Token(ClaseLexica.INT, yytext());
            }
          // fall through
          case 96: break;
          case 37:
            { System.out.println("Token encontrado: PTR (" + yytext() + ")"); return new Token(ClaseLexica.PTR, yytext());
            }
          // fall through
          case 97: break;
          case 38:
            { /* ignorar comentarios de varias líneas */
            }
          // fall through
          case 98: break;
          case 39:
            { System.out.println("Token encontrado: LITERAL_FLOTANTE (" + yytext() + ")");return new Token(ClaseLexica.LITERAL_FLOTANTE, yytext());
            }
          // fall through
          case 99: break;
          case 40:
            { System.out.println("Token encontrado: CASE (" + yytext() + ")"); return new Token(ClaseLexica.CASE, yytext());
            }
          // fall through
          case 100: break;
          case 41:
            { System.out.println("Token encontrado: ELSE (" + yytext() + ")"); return new Token(ClaseLexica.ELSE, yytext());
            }
          // fall through
          case 101: break;
          case 42:
            { System.out.println("Token encontrado: FUNC (" + yytext() + ")"); return new Token(ClaseLexica.FUNC, yytext());
            }
          // fall through
          case 102: break;
          case 43:
            { System.out.println("Token encontrado: RUNE (" + yytext() + ")"); return new Token(ClaseLexica.RUNE, yytext());
            }
          // fall through
          case 103: break;
          case 44:
            { System.out.println("Token encontrado: SCAN (" + yytext() + ")"); return new Token(ClaseLexica.SCAN, yytext());
            }
          // fall through
          case 104: break;
          case 45:
            { System.out.println("Token encontrado: TRUE (" + yytext() + ")"); return new Token(ClaseLexica.TRUE, yytext());
            }
          // fall through
          case 105: break;
          case 46:
            { System.out.println("Token encontrado: VOID (" + yytext() + ")"); return new Token(ClaseLexica.VOID, yytext());
            }
          // fall through
          case 106: break;
          case 47:
            { System.out.println("Token encontrado: BREAK (" + yytext() + ")"); return new Token(ClaseLexica.BREAK, yytext());
            }
          // fall through
          case 107: break;
          case 48:
            { System.out.println("Token encontrado: FALSE (" + yytext() + ")"); return new Token(ClaseLexica.FALSE, yytext());
            }
          // fall through
          case 108: break;
          case 49:
            { System.out.println("Token encontrado: FLOAT (" + yytext() + ")"); return new Token(ClaseLexica.FLOAT, yytext());
            }
          // fall through
          case 109: break;
          case 50:
            { System.out.println("Token encontrado: PRINT (" + yytext() + ")"); return new Token(ClaseLexica.PRINT, yytext());
            }
          // fall through
          case 110: break;
          case 51:
            { System.out.println("Token encontrado: PROTO (" + yytext() + ")"); return new Token(ClaseLexica.PROTO, yytext());
            }
          // fall through
          case 111: break;
          case 52:
            { System.out.println("Token encontrado: WHILE (" + yytext() + ")"); return new Token(ClaseLexica.WHILE, yytext());
            }
          // fall through
          case 112: break;
          case 53:
            { System.out.println("Token encontrado: DOUBLE (" + yytext() + ")"); return new Token(ClaseLexica.DOUBLE, yytext());
            }
          // fall through
          case 113: break;
          case 54:
            { System.out.println("Token encontrado: RETURN (" + yytext() + ")"); return new Token(ClaseLexica.RETURN, yytext());
            }
          // fall through
          case 114: break;
          case 55:
            { System.out.println("Token encontrado: STRING (" + yytext() + ")"); return new Token(ClaseLexica.STRING, yytext());
            }
          // fall through
          case 115: break;
          case 56:
            { System.out.println("Token encontrado: STRUCT (" + yytext() + ")"); return new Token(ClaseLexica.STRUCT, yytext());
            }
          // fall through
          case 116: break;
          case 57:
            { System.out.println("Token encontrado: SWITCH (" + yytext() + ")"); return new Token(ClaseLexica.SWITCH, yytext());
            }
          // fall through
          case 117: break;
          case 58:
            { System.out.println("Token encontrado: COMPLEX (" + yytext() + ")"); return new Token(ClaseLexica.COMPLEX, yytext());
            }
          // fall through
          case 118: break;
          case 59:
            { System.out.println("Token encontrado: DEFAULT (" + yytext() + ")"); return new Token(ClaseLexica.DEFAULT, yytext());
            }
          // fall through
          case 119: break;
          case 60:
            { System.out.println("Token encontrado: PROGRAMA (" + yytext() + ")"); return new Token(ClaseLexica.PROGRAMA, yytext());
            }
          // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
